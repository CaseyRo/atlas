# syntax=docker/dockerfile:1.4

# Stage 1: Build the React UI for ARM64
FROM --platform=linux/arm64 node:20-bullseye-slim AS ui-builder
WORKDIR /app
COPY data/react-ui/package*.json ./
RUN npm ci
COPY data/react-ui/ ./
RUN npm run build

# Stage 2: Build the Go binary for ARM64
FROM --platform=linux/arm64 golang:1.22 AS go-builder
WORKDIR /src
COPY config/atlas_go/go.mod config/atlas_go/go.sum ./
RUN go mod download
COPY config/atlas_go/ ./
RUN go build -o atlas .

# Stage 3: Final runtime image for ARM64
FROM --platform=linux/arm64 python:3.11-slim

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    ATLAS_UI_PORT=8888 \
    ATLAS_API_PORT=8889

ARG BUILD_VERSION=dev
ARG BUILD_COMMIT=local
ARG BUILD_TIME=unknown

RUN apt-get update && apt-get install -y \
    nginx iputils-ping traceroute nmap sqlite3 net-tools curl jq docker.io gettext-base \
    && pip install --no-cache-dir fastapi uvicorn \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

RUN rm -f /etc/nginx/conf.d/default.conf /etc/nginx/sites-enabled/default

RUN mkdir -p /config/bin /config/scripts /config/nginx /config/logs

COPY config/scripts /config/scripts
COPY config/nginx/default.conf.template /config/nginx/default.conf.template
COPY --from=go-builder /src/atlas /config/bin/atlas
COPY --from=ui-builder /app/dist/ /usr/share/nginx/html/

RUN chmod +x /config/scripts/*.sh

RUN set -eux; \
    printf '{ "version": "%s", "commit": "%s", "builtAt": "%s" }\n' \
    "$BUILD_VERSION" "$BUILD_COMMIT" "$BUILD_TIME" \
    > /usr/share/nginx/html/build-info.json

EXPOSE 8888 8889

CMD ["/config/scripts/atlas_check.sh"]
