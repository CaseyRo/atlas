# Atlas runtime & deployment notes

## Run the container

Host networking (no port mappings needed):
```bash
docker run -d \
  --name atlas \
  --network=host \
  --cap-add=NET_RAW \
  --cap-add=NET_ADMIN \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -e ATLAS_UI_PORT=8888 \
  -e ATLAS_API_PORT=8889 \
  keinstien/atlas:latest
```

Bridge networking (publish whichever ports you configure):
```bash
docker run -d \
  --name atlas \
  --cap-add=NET_RAW \
  --cap-add=NET_ADMIN \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -e ATLAS_UI_PORT=3000 \
  -e ATLAS_API_PORT=3001 \
  -p 3000:3000 \
  -p 3001:3001 \
  keinstien/atlas:latest
```

HTML assets are compiled during the Docker build, so you no longer need to copy a local `dist/` directory into the container volume.

## URLs
- UI: `http://localhost:${ATLAS_UI_PORT}/`
- API docs: `http://localhost:${ATLAS_UI_PORT}/api/docs`
- API JSON: `http://localhost:${ATLAS_UI_PORT}/api/hosts`

Replace `${ATLAS_UI_PORT}` with whichever UI port you configured (defaults to `8888`).

## Manual backend debugging
The entrypoint script (`config/scripts/atlas_check.sh`) now starts both FastAPI and Nginx using the configured environment variables. If you need to run the FastAPI server manually for debugging:
```bash
export PYTHONPATH=/config
ATLAS_API_PORT=${ATLAS_API_PORT:-8889}
uvicorn scripts.app:app --host 0.0.0.0 --port "$ATLAS_API_PORT" > /config/logs/uvicorn.log 2>&1 &
```

## Publishing images
Use `deploy.sh` when you want to build, tag, and push the standard image (React assets are bundled automatically):
```bash
./deploy.sh
```

For ARM64 builds, leverage Docker Buildx with the dedicated `Dockerfile.arm64`:
```bash
docker buildx build \
  --platform linux/arm64 \
  -f Dockerfile.arm64 \
  -t keinstien/atlas:arm64-dev \
  --load .
```
Add `--push` when you want to publish to Docker Hub and tag releases like `keinstien/atlas:arm64-vX.Y`.

